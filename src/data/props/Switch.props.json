{
  "componentDescription": "A toggle switch for user interactions like turning settings on or off.",
  "activeChild": {
    "type": "React.ReactNode",
    "typeValues": [],
    "description": "The content to be displayed when the switch is in an active state.",
    "defaultValue": ""
  },
  "colorScheme": {
    "type": "string",
    "typeValues": [],
    "description": "Defines the color theme for the switch component.",
    "defaultValue": "theme.primary"
  },
  "id": {
    "type": "string",
    "typeValues": [],
    "description": "Unique identifier for the switch component.",
    "defaultValue": ""
  },
  "isDisabled": {
    "type": "boolean",
    "typeValues": [],
    "description": "Determines if the switch is disabled.",
    "defaultValue": "false"
  },
  "isReadOnly": {
    "type": "boolean",
    "typeValues": [],
    "description": "Determines if the switch is read-only.",
    "defaultValue": "false"
  },
  "onChange": {
    "type": "Function",
    "typeValues": [],
    "description": "Callback function to handle the change event.",
    "defaultValue": ""
  },
  "name": {
    "type": "string",
    "typeValues": [],
    "description": "Name attribute for the switch component, useful for form submission.",
    "defaultValue": ""
  },
  "inActiveChild": {
    "type": "React.ReactNode",
    "typeValues": [],
    "description": "The content to be displayed when the switch is in an inactive state.",
    "defaultValue": ""
  },
  "styles": {
    "type": "SwitchStyles",
    "typeValues": ["CSSProperties"],
    "description": "Custom styles to apply to the switch component.",
    "defaultValue": "{ slider: {}, circle: {}, label: {} }"
  },
  "shadow": {
    "type": ["Shadow", "Elevation", "CSSProperties"],
    "typeValues": [],
    "description": "Defines the shadow appearance of the switch using predefined Shadow or Elevation, or a custom CSSProperties object.",
    "defaultValue": "{}"
  },
  "size": {
    "type": "Size",
    "typeValues": ["xs", "sm", "md", "lg", "xl"],
    "description": "Specifies the size of the switch component.",
    "defaultValue": "sm"
  },
  "labelPosition": {
    "type": "string",
    "typeValues": ["left", "right"],
    "description": "The position of the label relative to the switch, either 'left' or 'right'.",
    "defaultValue": "right"
  },
  "isHovered": {
    "type": "boolean",
    "typeValues": [],
    "description": "Denotes if the switch component is currently hovered by the cursor.",
    "defaultValue": "false"
  },
  "setIsHovered": {
    "type": "Function",
    "typeValues": [],
    "description": "Function to set the hover state of the switch component.",
    "defaultValue": ""
  },
  "value": {
    "type": "boolean",
    "typeValues": [],
    "description": "Controls the value or state of the switch (on/off).",
    "defaultValue": "false"
  },
  "setValue": {
    "type": "Function",
    "typeValues": [],
    "description": "Function to update the value of the switch.",
    "defaultValue": "() => {}"
  }
}
