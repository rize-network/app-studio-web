This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/pages/docs
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
src/
  pages/
    docs/
      components/
        docs.elements.tsx
        docs.request.ts
        docs.states.ts
        LiveCode.component.tsx
        MarkdownEditor.component.tsx
      docs.page.tsx

================================================================
Files
================================================================

================
File: src/pages/docs/components/docs.states.ts
================
// ChatStates.ts
import { useState } from 'react';

export function useHomePageStates() {
  const [inputValue, setInputValue] = useState<string>('');

  return {
    inputValue,
    setInputValue,
  };
}

================
File: src/pages/docs/components/LiveCode.component.tsx
================
import React from 'react';
import { LiveProvider, LiveEditor, LiveError, LivePreview } from 'react-live';
import { View } from 'app-studio';

const LiveCode = ({ code, language = 'jsx', scope }: any) => {
  console.log({ code, language, scope });
  return (
    <LiveProvider code={code.trim()} scope={scope} language={language}>
      <View>
        <LiveEditor />
        <LiveError />
        <LivePreview />
      </View>
    </LiveProvider>
  );
};

export default LiveCode;

================
File: src/pages/docs/components/MarkdownEditor.component.tsx
================
import React from 'react';

import {
  headingsPlugin,
  listsPlugin,
  quotePlugin,
  markdownShortcutPlugin,
  MDXEditor,
  frontmatterPlugin,
  imagePlugin,
  linkDialogPlugin,
  linkPlugin,
  SandpackConfig,
  sandpackPlugin,
  codeBlockPlugin,
  codeMirrorPlugin,
} from '@mdxeditor/editor';
import '@mdxeditor/editor/style.css';

const defaultSnippetContent = `
export default function App() {
  return (
    <div className="App">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
    </div>
  );
}
`.trim();

const simpleSandpackConfig: SandpackConfig = {
  defaultPreset: 'react',
  presets: [
    {
      label: 'React',
      name: 'react',
      meta: 'live react',
      sandpackTemplate: 'react',
      sandpackTheme: 'light',
      snippetFileName: '/App.js',
      snippetLanguage: 'jsx',
      initialSnippetContent: defaultSnippetContent,
    },
  ],
};

const plugins = [
  imagePlugin(),
  quotePlugin(),
  headingsPlugin(),
  listsPlugin(),
  linkPlugin(),
  frontmatterPlugin(),
  linkDialogPlugin(),
  markdownShortcutPlugin(),
  codeBlockPlugin({ defaultCodeBlockLanguage: 'js' }),
  sandpackPlugin({ sandpackConfig: simpleSandpackConfig }),
  codeMirrorPlugin({
    codeBlockLanguages: { js: 'JavaScript', css: 'CSS', tsx: 'TypeScript' },
  }),
];

export const MarkdownEditor = ({ markdown }: { markdown: string }) => {
  return <MDXEditor markdown={markdown} plugins={plugins} />;
};

================
File: src/pages/docs/components/docs.elements.tsx
================
import React from 'react';
import { Link } from 'react-router-dom';
import { Vertical, Text } from 'app-studio';

export const SideMenu = ({ docs, ...props }: any) => {
  return (
    <Vertical
      gap={20}
      alignItems="center"
      color="black"
      backgroundColor="#f9f9f9"
      paddingVertical={50}
      width={250}
      {...props}
    >
      {docs.map((doc: any) => (
        <Link
          key={doc.componentName}
          to={`/docs/${doc.componentName}`}
          style={{ textDecoration: 'none', color: 'black' }}
        >
          <Text fontSize={16}>{doc.componentName}</Text>
        </Link>
      ))}
    </Vertical>
  );
};
export const Text1 = () => <>Hello</>;

================
File: src/pages/docs/components/docs.request.ts
================
// useChatNavigation.ts

export type Sections = {
  title: string;
  items?: { name: string; link: string }[];
}[];
export const useDocsRequest = () => {
  const sections: Sections = [
    { title: 'overview' },
    { title: 'theme' },
    { title: 'typography' },
    { title: 'responsive' },
    {
      title: 'components',
      items: [
        { name: 'Button', link: 'button' },
        { name: 'Input', link: 'input' },
      ],
    },
  ];

  return { sections };
};

================
File: src/pages/docs/docs.page.tsx
================
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import * as AppComponents from '../../components';
import { Horizontal, Vertical, View } from 'app-studio';
import * as AppStudioComponents from 'app-studio';

import { loadDocs } from '../../docsLoader';
import * as runtime from 'react/jsx-runtime';
import { Fragment } from 'react';

import { SideMenu } from './components/docs.elements';
import LiveCode from './components/LiveCode.component';
import { MDXProvider } from '@mdx-js/react';
import { evaluate } from '@mdx-js/mdx';

import '@mdxeditor/editor/style.css';

const DocsPage = () => {
  const { componentName } = useParams();

  // Debug: Log available components
  console.log('Available AppComponents:', Object.keys(AppComponents));
  console.log(
    'Available AppStudioComponents:',
    Object.keys(AppStudioComponents)
  );

  const components = {
    code: (props: any) => {
      const { className = '', children } = props;
      const language = className.replace('language-', '');
      console.log('LiveCode rendering with:', {
        language,
        hasChildren: !!children,
      });

      // Process the code to remove import statements for live execution
      let processedCode = children;
      if (language === 'jsx' && typeof children === 'string') {
        // Remove import statements from the code
        const lines = children.split('\n');
        const filteredLines = lines.filter((line) => {
          const trimmed = line.trim();
          return (
            !trimmed.startsWith('import ') && !trimmed.startsWith('export ')
          );
        });

        // Remove empty lines at the beginning
        while (filteredLines.length > 0 && !filteredLines[0].trim()) {
          filteredLines.shift();
        }

        processedCode = filteredLines.join('\n');
      }

      return (
        <LiveCode
          code={processedCode}
          language={language}
          scope={{ React, ...AppComponents, ...AppStudioComponents }}
        />
      );
    },
  };

  const [docs, setDocs] = useState<any>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [Content, setContent] = useState<React.ComponentType | null>(null);

  useEffect(() => {
    const fetchDocs = async () => {
      const loadedDocs = await loadDocs();
      setDocs(loadedDocs);
    };

    fetchDocs();
  }, []);

  useEffect(() => {
    const fetchDoc = async () => {
      if (!docs || docs.length === 0) return;

      const doc = docs.find(
        (d: any) =>
          d.componentName.toLowerCase() === componentName?.toLowerCase()
      );

      if (doc) {
        setIsLoading(true);
        const response = await fetch(doc.path);
        const text = await response.text();

        try {
          console.log('Evaluating MDX for:', componentName);
          console.log('MDX text preview:', text.substring(0, 200) + '...');

          // Pre-process the MDX to fix various syntax issues
          let processedText = text;

          // Now try with the processed text
          const evaluatedMdx = await evaluate(processedText, {
            ...runtime,
            useMDXComponents: () => components,
            development: false,
            Fragment,
          });
          setContent(() => evaluatedMdx.default);
        } catch (error: any) {
          console.error('Error evaluating MDX:', error);
          console.error('Error details:', error.stack);
          console.error('Error message:', error?.message);
          console.error('Error location:', error?.location);
          console.error('MDX text that failed:', text);

          // Try to create a fallback content
          const ErrorComponent = () => (
            <div
              style={{
                padding: '20px',
                border: '1px solid red',
                margin: '10px',
                fontFamily: 'monospace',
              }}
            >
              <h3>Error loading documentation for {componentName}</h3>
              <p>
                <strong>Error:</strong> {error?.message || 'Unknown error'}
              </p>
              {error?.location && (
                <p>
                  <strong>Location:</strong> Line {error.location.line}, Column{' '}
                  {error.location.column}
                </p>
              )}
              <details>
                <summary>Full error details</summary>
                <pre style={{ whiteSpace: 'pre-wrap', fontSize: '12px' }}>
                  {error?.stack}
                </pre>
              </details>
              <details>
                <summary>MDX content (first 500 chars)</summary>
                <pre style={{ whiteSpace: 'pre-wrap', fontSize: '12px' }}>
                  {text.substring(0, 500)}...
                </pre>
              </details>
            </div>
          );
          setContent(() => ErrorComponent);
        }
        setIsLoading(false);
      }
    };

    fetchDoc();
  }, [docs, componentName]);

  return (
    <Horizontal height="100%" overflowY="auto">
      <SideMenu docs={docs} flex={1} />
      <Vertical flex={5} padding="5px 10px">
        {!isLoading ? (
          <MDXProvider components={components}>
            <View width={'80vw'} wrap="wrap" flexWrap="wrap">
              {Content ? <Content /> : null}
            </View>
          </MDXProvider>
        ) : (
          <AppComponents.Loader />
        )}
      </Vertical>
    </Horizontal>
  );
};

export default DocsPage;




================================================================
End of Codebase
================================================================
